/**
 * Sidebar Item Component (Task 8.3)
 * 
 * Individual item renderer with drag-and-drop support,\n * metadata display, and rich visual feedback.\n */\n\nimport React, { useState, useCallback } from 'react'\nimport { FileText, Bot, Link, Clock, User, Tag } from 'lucide-react'\nimport { cn } from '../../lib/utils'\nimport { \n  SidebarObjectItem,\n  DragData,\n  ChainMetadata,\n  DocumentMetadata,\n  AgentMetadata \n} from '../../../schemas/api/sidebar'\n\ninterface SidebarItemProps {\n  item: SidebarObjectItem\n  onSelect?: () => void\n  onDragStart?: (event: React.DragEvent) => void\n  onDragEnd?: (event: React.DragEvent) => void\n  showMetadata?: boolean\n  compact?: boolean\n  className?: string\n}\n\nexport const SidebarItem: React.FC<SidebarItemProps> = ({\n  item,\n  onSelect,\n  onDragStart,\n  onDragEnd,\n  showMetadata = true,\n  compact = false,\n  className\n}) => {\n  const [isDragOver, setIsDragOver] = useState(false)\n  const [dragPreview, setDragPreview] = useState<string | null>(null)\n  \n  // Get type-specific icon\n  const getIcon = () => {\n    switch (item.type) {\n      case 'chain':\n        return <Link size={compact ? 14 : 16} className=\"text-blue-500\" />\n      case 'document':\n        return <FileText size={compact ? 14 : 16} className=\"text-green-500\" />\n      case 'agent':\n        return <Bot size={compact ? 14 : 16} className=\"text-purple-500\" />\n      default:\n        return <FileText size={compact ? 14 : 16} className=\"text-muted-foreground\" />\n    }\n  }\n  \n  // Get status indicator\n  const getStatusIndicator = () => {\n    if (item.type === 'chain' && 'status' in item.metadata) {\n      const status = (item.metadata as ChainMetadata).status\n      return (\n        <div className={cn(\n          'w-2 h-2 rounded-full flex-shrink-0',\n          {\n            'bg-gray-400': status === 'draft',\n            'bg-green-500': status === 'active',\n            'bg-yellow-500': status === 'paused',\n            'bg-blue-500': status === 'completed',\n            'bg-red-500': status === 'error'\n          }\n        )} title={`Status: ${status}`} />\n      )\n    }\n    \n    if (item.type === 'document' && 'status' in item.metadata) {\n      const status = (item.metadata as DocumentMetadata).status\n      return (\n        <div className={cn(\n          'w-2 h-2 rounded-full flex-shrink-0',\n          {\n            'bg-gray-400': status === 'draft',\n            'bg-blue-500': status === 'review',\n            'bg-green-500': status === 'published',\n            'bg-orange-500': status === 'archived'\n          }\n        )} title={`Status: ${status}`} />\n      )\n    }\n    \n    if (item.type === 'agent' && 'status' in item.metadata) {\n      const status = (item.metadata as AgentMetadata).status\n      return (\n        <div className={cn(\n          'w-2 h-2 rounded-full flex-shrink-0',\n          {\n            'bg-green-500': status === 'idle',\n            'bg-yellow-500 animate-pulse': status === 'processing',\n            'bg-red-500': status === 'error',\n            'bg-gray-400': status === 'offline'\n          }\n        )} title={`Status: ${status}`} />\n      )\n    }\n    \n    return null\n  }\n  \n  // Get metadata display\n  const getMetadataDisplay = () => {\n    if (!showMetadata || compact) return null\n    \n    const metadata = item.metadata\n    const elements: React.ReactNode[] = []\n    \n    // Type-specific metadata\n    if (item.type === 'chain' && 'nodeCount' in metadata) {\n      const chainMeta = metadata as ChainMetadata\n      elements.push(\n        <span key=\"nodes\" className=\"text-xs text-muted-foreground flex items-center gap-1\">\n          <Link size={10} />\n          {chainMeta.nodeCount} nodes\n        </span>\n      )\n    }\n    \n    if (item.type === 'document' && 'size' in metadata) {\n      const docMeta = metadata as DocumentMetadata\n      if (docMeta.size) {\n        elements.push(\n          <span key=\"size\" className=\"text-xs text-muted-foreground\">\n            {formatFileSize(docMeta.size)}\n          </span>\n        )\n      }\n      if (docMeta.wordCount) {\n        elements.push(\n          <span key=\"words\" className=\"text-xs text-muted-foreground\">\n            {docMeta.wordCount.toLocaleString()} words\n          </span>\n        )\n      }\n    }\n    \n    if (item.type === 'agent' && 'model' in metadata) {\n      const agentMeta = metadata as AgentMetadata\n      elements.push(\n        <span key=\"model\" className=\"text-xs text-muted-foreground font-mono bg-muted px-1.5 py-0.5 rounded\">\n          {agentMeta.model}\n        </span>\n      )\n    }\n    \n    // Common metadata\n    if (metadata.lastModified) {\n      elements.push(\n        <span key=\"modified\" className=\"text-xs text-muted-foreground flex items-center gap-1\">\n          <Clock size={10} />\n          {formatRelativeTime(metadata.lastModified)}\n        </span>\n      )\n    }\n    \n    if ('author' in metadata && metadata.author) {\n      elements.push(\n        <span key=\"author\" className=\"text-xs text-muted-foreground flex items-center gap-1\">\n          <User size={10} />\n          {metadata.author}\n        </span>\n      )\n    }\n    \n    return elements.length > 0 ? (\n      <div className=\"flex flex-wrap gap-2 mt-1\">\n        {elements}\n      </div>\n    ) : null\n  }\n  \n  // Get badges\n  const getBadges = () => {\n    if (!item.metadata.badges || item.metadata.badges.length === 0) return null\n    \n    return (\n      <div className=\"flex flex-wrap gap-1 mt-1\">\n        {item.metadata.badges.slice(0, 3).map((badge, index) => (\n          <span\n            key={index}\n            className=\"text-xs px-1.5 py-0.5 rounded font-medium\"\n            style={{\n              color: badge.color,\n              backgroundColor: badge.backgroundColor\n            }}\n          >\n            {badge.text}\n          </span>\n        ))}\n        {item.metadata.badges.length > 3 && (\n          <span className=\"text-xs text-muted-foreground\">\n            +{item.metadata.badges.length - 3}\n          </span>\n        )}\n      </div>\n    )\n  }\n  \n  // Get tags\n  const getTags = () => {\n    if (!item.metadata.tags || item.metadata.tags.length === 0 || compact) return null\n    \n    return (\n      <div className=\"flex flex-wrap gap-1 mt-1\">\n        {item.metadata.tags.slice(0, 3).map(tag => (\n          <span \n            key={tag}\n            className=\"text-xs bg-muted text-muted-foreground px-1.5 py-0.5 rounded flex items-center gap-1\"\n          >\n            <Tag size={8} />\n            {tag}\n          </span>\n        ))}\n        {item.metadata.tags.length > 3 && (\n          <span className=\"text-xs text-muted-foreground\">\n            +{item.metadata.tags.length - 3} more\n          </span>\n        )}\n      </div>\n    )\n  }\n  \n  // Handle drag start\n  const handleDragStart = useCallback((e: React.DragEvent) => {\n    e.stopPropagation()\n    \n    // Create drag data\n    const dragData: DragData = {\n      objectType: item.type,\n      objectId: item.metadata.id,\n      metadata: item.metadata,\n      sourceSection: item.type + 's', // chains, documents, agents\n      canvasNodeType: item.type === 'chain' ? undefined : item.type,\n      dragStartPosition: { x: e.clientX, y: e.clientY },\n      dragStartTime: Date.now()\n    }\n    \n    // Set drag data\n    e.dataTransfer.setData('application/json', JSON.stringify(dragData))\n    e.dataTransfer.effectAllowed = 'copy'\n    \n    // Create custom drag preview if thumbnail available\n    if (item.metadata.thumbnail) {\n      const img = new Image()\n      img.src = item.metadata.thumbnail\n      img.onload = () => {\n        e.dataTransfer.setDragImage(img, img.width / 2, img.height / 2)\n      }\n      setDragPreview(item.metadata.thumbnail)\n    }\n    \n    onDragStart?.(e)\n  }, [item, onDragStart])\n  \n  // Handle drag end\n  const handleDragEnd = useCallback((e: React.DragEvent) => {\n    setDragPreview(null)\n    onDragEnd?.(e)\n  }, [onDragEnd])\n  \n  // Handle click\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation()\n    onSelect?.()\n  }, [onSelect])\n  \n  // Handle keyboard interaction\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault()\n      onSelect?.()\n    }\n  }, [onSelect])\n  \n  return (\n    <div\n      className={cn(\n        'sidebar-item group relative cursor-pointer transition-all duration-200',\n        'border border-transparent rounded-md p-3',\n        {\n          // State classes\n          'bg-primary/10 border-primary/20 shadow-sm': item.isSelected,\n          'bg-accent/50': item.isHovered,\n          'opacity-50 scale-95': item.isDragging,\n          'ring-2 ring-primary/30': isDragOver,\n          \n          // Size classes\n          'p-2': compact,\n          'p-3': !compact,\n          \n          // Interactive states\n          'hover:bg-accent/30 hover:border-border/50': !item.isSelected,\n          'hover:shadow-md': !compact,\n        },\n        className\n      )}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      onDragEnter={() => setIsDragOver(true)}\n      onDragLeave={() => setIsDragOver(false)}\n      draggable\n      tabIndex={0}\n      role=\"button\"\n      aria-selected={item.isSelected}\n      data-testid={`sidebar-item-${item.metadata.id}`}\n      data-item-type={item.type}\n    >\n      {/* Main Content Row */}\n      <div className=\"flex items-center gap-3\">\n        {/* Icon */}\n        <div className=\"flex-shrink-0\">\n          {getIcon()}\n        </div>\n        \n        {/* Name and Status */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <span className={cn(\n              'font-medium truncate',\n              {\n                'text-sm': compact,\n                'text-sm': !compact\n              }\n            )}>\n              {item.metadata.name}\n            </span>\n            {getStatusIndicator()}\n          </div>\n          \n          {/* Description */}\n          {item.metadata.description && !compact && (\n            <p className=\"text-xs text-muted-foreground mt-0.5 line-clamp-2\">\n              {item.metadata.description}\n            </p>\n          )}\n        </div>\n        \n        {/* Selection Indicator */}\n        {item.isSelected && (\n          <div className=\"flex-shrink-0 w-2 h-2 bg-primary rounded-full\" />\n        )}\n      </div>\n      \n      {/* Metadata */}\n      {getMetadataDisplay()}\n      \n      {/* Badges */}\n      {getBadges()}\n      \n      {/* Tags */}\n      {getTags()}\n      \n      {/* Drag Preview */}\n      {dragPreview && (\n        <div className=\"absolute -top-2 -right-2 w-4 h-4 bg-primary rounded-full flex items-center justify-center\">\n          <span className=\"text-xs text-primary-foreground\">📎</span>\n        </div>\n      )}\n    </div>\n  )\n}\n\n// Helper functions\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 B'\n  \n  const k = 1024\n  const sizes = ['B', 'KB', 'MB', 'GB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  \n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`\n}\n\nfunction formatRelativeTime(date: Date): string {\n  const now = new Date()\n  const diffMs = now.getTime() - date.getTime()\n  const diffHours = diffMs / (1000 * 60 * 60)\n  const diffDays = diffMs / (1000 * 60 * 60 * 24)\n  \n  if (diffHours < 1) {\n    return 'Just now'\n  } else if (diffHours < 24) {\n    return `${Math.floor(diffHours)}h ago`\n  } else if (diffDays < 7) {\n    return `${Math.floor(diffDays)}d ago`\n  } else {\n    return date.toLocaleDateString()\n  }\n}\n\nexport default SidebarItem