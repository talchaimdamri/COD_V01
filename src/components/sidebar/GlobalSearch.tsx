/**\n * Global Search Component (Task 8.5)\n * \n * Global search functionality that searches across all sidebar sections\n * with advanced search capabilities and result highlighting.\n */\n\nimport React, { useState, useCallback, useMemo } from 'react'\nimport { Search, ArrowRight, Filter, Clock } from 'lucide-react'\nimport { cn, debounce } from '../../lib/utils'\nimport { SearchBar } from './SearchBar'\n\ninterface GlobalSearchConfig {\n  enabled: boolean\n  placeholder: string\n  minSearchLength: number\n  debounceMs: number\n  maxResults: number\n}\n\ninterface SearchResult {\n  id: string\n  type: 'chain' | 'document' | 'agent'\n  name: string\n  description?: string\n  section: string\n  matches: Array<{\n    field: string\n    text: string\n    highlights: Array<{ start: number; end: number }>\n  }>\n  score: number\n}\n\ninterface GlobalSearchProps {\n  config: GlobalSearchConfig\n  onSearch?: (term: string) => void\n  onResultSelect?: (result: SearchResult) => void\n  className?: string\n}\n\nexport const GlobalSearch: React.FC<GlobalSearchProps> = ({\n  config,\n  onSearch,\n  onResultSelect,\n  className\n}) => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [isSearching, setIsSearching] = useState(false)\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([])\n  const [showResults, setShowResults] = useState(false)\n  const [recentSearches, setRecentSearches] = useState<string[]>([])\n  \n  // Mock search function - in real app this would call an API\n  const performSearch = useCallback(async (term: string): Promise<SearchResult[]> => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 200))\n    \n    if (!term.trim() || term.length < config.minSearchLength) {\n      return []\n    }\n    \n    // Mock results - in real app this would come from backend\n    const mockResults: SearchResult[] = [\n      {\n        id: 'chain-1',\n        type: 'chain',\n        name: 'Document Processing Pipeline',\n        description: 'Automated workflow for processing incoming documents',\n        section: 'Chains',\n        matches: [\n          {\n            field: 'name',\n            text: 'Document Processing Pipeline',\n            highlights: [{ start: 0, end: 8 }]\n          }\n        ],\n        score: 0.95\n      },\n      {\n        id: 'doc-1',\n        type: 'document',\n        name: 'API Documentation',\n        description: 'Complete API reference and examples',\n        section: 'Documents',\n        matches: [\n          {\n            field: 'name',\n            text: 'API Documentation',\n            highlights: [{ start: 4, end: 17 }]\n          }\n        ],\n        score: 0.87\n      },\n      {\n        id: 'agent-1',\n        type: 'agent',\n        name: 'Text Summarizer',\n        description: 'AI agent that creates concise summaries of long documents',\n        section: 'Agents',\n        matches: [\n          {\n            field: 'description',\n            text: 'AI agent that creates concise summaries of long documents',\n            highlights: [{ start: 47, end: 56 }]\n          }\n        ],\n        score: 0.73\n      }\n    ]\n    \n    // Filter results based on search term\n    const filteredResults = mockResults.filter(result => \n      result.name.toLowerCase().includes(term.toLowerCase()) ||\n      result.description?.toLowerCase().includes(term.toLowerCase())\n    )\n    \n    // Sort by score and limit results\n    return filteredResults\n      .sort((a, b) => b.score - a.score)\n      .slice(0, config.maxResults)\n  }, [config.minSearchLength, config.maxResults])\n  \n  // Debounced search handler\n  const debouncedSearch = useCallback(\n    debounce(async (term: string) => {\n      if (term.length >= config.minSearchLength || term.length === 0) {\n        setIsSearching(true)\n        try {\n          const results = await performSearch(term)\n          setSearchResults(results)\n          setShowResults(term.length > 0)\n        } catch (error) {\n          console.error('Search failed:', error)\n          setSearchResults([])\n        } finally {\n          setIsSearching(false)\n        }\n      }\n    }, config.debounceMs),\n    [config.minSearchLength, config.debounceMs, performSearch]\n  )\n  \n  // Handle search input change\n  const handleSearchChange = useCallback((term: string) => {\n    setSearchTerm(term)\n    onSearch?.(term)\n    debouncedSearch(term)\n    \n    if (!term.trim()) {\n      setShowResults(false)\n      setSearchResults([])\n    }\n  }, [onSearch, debouncedSearch])\n  \n  // Handle result selection\n  const handleResultSelect = useCallback((result: SearchResult) => {\n    setShowResults(false)\n    setSearchTerm(result.name)\n    \n    // Add to recent searches\n    const newRecentSearches = [result.name, ...recentSearches.filter(s => s !== result.name)].slice(0, 5)\n    setRecentSearches(newRecentSearches)\n    \n    onResultSelect?.(result)\n  }, [recentSearches, onResultSelect])\n  \n  // Highlight text matches\n  const highlightMatches = (text: string, highlights: Array<{ start: number; end: number }>) => {\n    if (!highlights.length) return text\n    \n    const parts: React.ReactNode[] = []\n    let lastIndex = 0\n    \n    highlights.forEach(({ start, end }, index) => {\n      // Add text before highlight\n      if (start > lastIndex) {\n        parts.push(\n          <span key={`text-${index}`}>\n            {text.slice(lastIndex, start)}\n          </span>\n        )\n      }\n      \n      // Add highlighted text\n      parts.push(\n        <mark key={`highlight-${index}`} className=\"bg-yellow-200 text-yellow-900 px-0.5 rounded\">\n          {text.slice(start, end)}\n        </mark>\n      )\n      \n      lastIndex = end\n    })\n    \n    // Add remaining text\n    if (lastIndex < text.length) {\n      parts.push(\n        <span key=\"text-end\">\n          {text.slice(lastIndex)}\n        </span>\n      )\n    }\n    \n    return <>{parts}</>\n  }\n  \n  // Get type icon\n  const getTypeIcon = (type: SearchResult['type']) => {\n    switch (type) {\n      case 'chain':\n        return <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n      case 'document':\n        return <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n      case 'agent':\n        return <div className=\"w-2 h-2 bg-purple-500 rounded-full\" />\n      default:\n        return <div className=\"w-2 h-2 bg-gray-400 rounded-full\" />\n    }\n  }\n  \n  // Search statistics\n  const searchStats = useMemo(() => {\n    if (!searchTerm || searchResults.length === 0) return null\n    \n    const sectionCounts = searchResults.reduce((acc, result) => {\n      acc[result.section] = (acc[result.section] || 0) + 1\n      return acc\n    }, {} as Record<string, number>)\n    \n    return {\n      total: searchResults.length,\n      sections: sectionCounts\n    }\n  }, [searchTerm, searchResults])\n  \n  return (\n    <div className={cn('relative', className)}>\n      {/* Search Input */}\n      <SearchBar\n        config={{\n          enabled: config.enabled,\n          placeholder: config.placeholder,\n          minLength: config.minSearchLength,\n          debounceMs: config.debounceMs,\n          searchFields: ['name', 'description'],\n          caseSensitive: false,\n          fuzzySearch: false,\n          maxResults: config.maxResults,\n          highlightMatches: true\n        }}\n        value={searchTerm}\n        onChange={handleSearchChange}\n        autoFocus={false}\n      />\n      \n      {/* Search Results Dropdown */}\n      {showResults && (\n        <div className={cn(\n          'absolute top-full left-0 right-0 mt-1 z-50',\n          'bg-popover border border-border rounded-md shadow-lg',\n          'max-h-96 overflow-hidden flex flex-col'\n        )}>\n          {/* Loading State */}\n          {isSearching && (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              <div className=\"animate-spin w-4 h-4 border-2 border-primary border-t-transparent rounded-full mx-auto mb-2\" />\n              Searching...\n            </div>\n          )}\n          \n          {/* Search Stats */}\n          {!isSearching && searchStats && (\n            <div className=\"px-4 py-2 border-b border-border bg-muted/30\">\n              <div className=\"text-xs text-muted-foreground\">\n                Found {searchStats.total} results\n                {Object.entries(searchStats.sections).map(([section, count]) => (\n                  <span key={section} className=\"ml-2\">\n                    {count} in {section}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {/* Results List */}\n          {!isSearching && searchResults.length > 0 && (\n            <div className=\"flex-1 overflow-y-auto\">\n              {searchResults.map(result => (\n                <button\n                  key={result.id}\n                  className={cn(\n                    'w-full p-3 text-left hover:bg-accent transition-colors',\n                    'border-b border-border last:border-b-0',\n                    'focus:bg-accent focus:outline-none'\n                  )}\n                  onClick={() => handleResultSelect(result)}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    {/* Type Indicator */}\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      {getTypeIcon(result.type)}\n                    </div>\n                    \n                    {/* Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span className=\"text-sm font-medium text-foreground truncate\">\n                          {highlightMatches(result.name, result.matches.find(m => m.field === 'name')?.highlights || [])}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground bg-muted px-1.5 py-0.5 rounded\">\n                          {result.section}\n                        </span>\n                      </div>\n                      \n                      {result.description && (\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                          {highlightMatches(\n                            result.description, \n                            result.matches.find(m => m.field === 'description')?.highlights || []\n                          )}\n                        </p>\n                      )}\n                      \n                      {/* Match Info */}\n                      {result.matches.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {result.matches.map((match, index) => (\n                            <span key={index} className=\"text-xs text-muted-foreground bg-muted/50 px-1 py-0.5 rounded\">\n                              {match.field}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Action Arrow */}\n                    <ArrowRight size={14} className=\"text-muted-foreground mt-1 flex-shrink-0\" />\n                  </div>\n                </button>\n              ))}\n            </div>\n          )}\n          \n          {/* No Results */}\n          {!isSearching && searchTerm && searchResults.length === 0 && (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              <Search size={24} className=\"mx-auto mb-2 opacity-50\" />\n              <p>No results found for \"{searchTerm}\"</p>\n              <p className=\"text-xs mt-1\">Try different keywords or check spelling</p>\n            </div>\n          )}\n          \n          {/* Recent Searches */}\n          {!searchTerm && recentSearches.length > 0 && (\n            <div className=\"border-t border-border\">\n              <div className=\"px-4 py-2 text-xs text-muted-foreground font-medium flex items-center gap-2\">\n                <Clock size={12} />\n                Recent Searches\n              </div>\n              {recentSearches.slice(0, 3).map((search, index) => (\n                <button\n                  key={index}\n                  className=\"w-full px-4 py-2 text-left text-sm hover:bg-accent transition-colors flex items-center gap-2\"\n                  onClick={() => handleSearchChange(search)}\n                >\n                  <Search size={12} className=\"text-muted-foreground\" />\n                  <span className=\"flex-1 truncate\">{search}</span>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default GlobalSearch