/**\n * Filter Panel Component (Task 8.5)\n * \n * Advanced filtering interface with multiple filter types\n * including select, multiselect, date ranges, and boolean filters.\n */\n\nimport React, { useState, useCallback } from 'react'\nimport { Check, ChevronDown, Calendar, X } from 'lucide-react'\nimport { cn } from '../../lib/utils'\nimport { FilterOption } from '../../../schemas/api/sidebar'\n\ninterface FilterPanelProps {\n  filters: FilterOption[]\n  activeFilters: Record<string, any>\n  onChange?: (filters: Record<string, any>) => void\n  className?: string\n}\n\nexport const FilterPanel: React.FC<FilterPanelProps> = ({\n  filters,\n  activeFilters,\n  onChange,\n  className\n}) => {\n  const [openDropdowns, setOpenDropdowns] = useState<Set<string>>(new Set())\n  \n  // Toggle dropdown open/close\n  const toggleDropdown = useCallback((filterId: string) => {\n    const newOpenDropdowns = new Set(openDropdowns)\n    if (newOpenDropdowns.has(filterId)) {\n      newOpenDropdowns.delete(filterId)\n    } else {\n      newOpenDropdowns.add(filterId)\n    }\n    setOpenDropdowns(newOpenDropdowns)\n  }, [openDropdowns])\n  \n  // Handle filter change\n  const handleFilterChange = useCallback((key: string, value: any) => {\n    const newFilters = { ...activeFilters, [key]: value }\n    onChange?.(newFilters)\n  }, [activeFilters, onChange])\n  \n  // Clear all filters\n  const clearAllFilters = useCallback(() => {\n    onChange?.({})\n  }, [onChange])\n  \n  // Clear specific filter\n  const clearFilter = useCallback((key: string) => {\n    const newFilters = { ...activeFilters }\n    delete newFilters[key]\n    onChange?.(newFilters)\n  }, [activeFilters, onChange])\n  \n  // Render select filter\n  const renderSelectFilter = (filter: FilterOption) => {\n    const isOpen = openDropdowns.has(filter.key)\n    const currentValue = activeFilters[filter.key]\n    const selectedOption = filter.options?.find(opt => opt.value === currentValue)\n    \n    return (\n      <div className=\"relative\">\n        <button\n          className={cn(\n            'w-full flex items-center justify-between px-3 py-2 text-left',\n            'border border-border rounded-md bg-background',\n            'hover:bg-accent/50 transition-colors text-sm',\n            { 'ring-1 ring-primary/30': isOpen }\n          )}\n          onClick={() => toggleDropdown(filter.key)}\n        >\n          <span className={currentValue ? 'text-foreground' : 'text-muted-foreground'}>\n            {selectedOption?.label || `Select ${filter.label}`}\n          </span>\n          <ChevronDown \n            size={14} \n            className={cn(\n              'transition-transform text-muted-foreground',\n              { 'rotate-180': isOpen }\n            )} \n          />\n        </button>\n        \n        {isOpen && (\n          <div className=\"absolute top-full left-0 right-0 mt-1 z-50 bg-popover border border-border rounded-md shadow-lg max-h-48 overflow-y-auto\">\n            <div className=\"py-1\">\n              {/* Clear option */}\n              <button\n                className=\"w-full px-3 py-2 text-left text-sm hover:bg-accent transition-colors text-muted-foreground\"\n                onClick={() => {\n                  handleFilterChange(filter.key, null)\n                  toggleDropdown(filter.key)\n                }}\n              >\n                Clear selection\n              </button>\n              \n              {/* Options */}\n              {filter.options?.map(option => (\n                <button\n                  key={String(option.value)}\n                  className={cn(\n                    'w-full px-3 py-2 text-left text-sm hover:bg-accent transition-colors',\n                    'flex items-center justify-between',\n                    { 'bg-accent text-foreground': currentValue === option.value }\n                  )}\n                  onClick={() => {\n                    handleFilterChange(filter.key, option.value)\n                    toggleDropdown(filter.key)\n                  }}\n                >\n                  <span>{option.label}</span>\n                  {option.count !== undefined && (\n                    <span className=\"text-xs text-muted-foreground\">\n                      {option.count}\n                    </span>\n                  )}\n                  {currentValue === option.value && (\n                    <Check size={14} className=\"text-primary\" />\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n  \n  // Render multiselect filter\n  const renderMultiSelectFilter = (filter: FilterOption) => {\n    const isOpen = openDropdowns.has(filter.key)\n    const currentValues = activeFilters[filter.key] || []\n    const selectedCount = currentValues.length\n    \n    return (\n      <div className=\"relative\">\n        <button\n          className={cn(\n            'w-full flex items-center justify-between px-3 py-2 text-left',\n            'border border-border rounded-md bg-background',\n            'hover:bg-accent/50 transition-colors text-sm',\n            { 'ring-1 ring-primary/30': isOpen }\n          )}\n          onClick={() => toggleDropdown(filter.key)}\n        >\n          <span className={selectedCount > 0 ? 'text-foreground' : 'text-muted-foreground'}>\n            {selectedCount > 0 \n              ? `${selectedCount} ${filter.label.toLowerCase()} selected`\n              : `Select ${filter.label}`\n            }\n          </span>\n          <ChevronDown \n            size={14} \n            className={cn(\n              'transition-transform text-muted-foreground',\n              { 'rotate-180': isOpen }\n            )} \n          />\n        </button>\n        \n        {isOpen && (\n          <div className=\"absolute top-full left-0 right-0 mt-1 z-50 bg-popover border border-border rounded-md shadow-lg max-h-48 overflow-y-auto\">\n            <div className=\"py-1\">\n              {/* Clear all option */}\n              {selectedCount > 0 && (\n                <>\n                  <button\n                    className=\"w-full px-3 py-2 text-left text-sm hover:bg-accent transition-colors text-muted-foreground\"\n                    onClick={() => handleFilterChange(filter.key, [])}\n                  >\n                    Clear all selections\n                  </button>\n                  <div className=\"border-t border-border my-1\" />\n                </>\n              )}\n              \n              {/* Options */}\n              {filter.options?.map(option => {\n                const isSelected = currentValues.includes(option.value)\n                \n                return (\n                  <button\n                    key={String(option.value)}\n                    className={cn(\n                      'w-full px-3 py-2 text-left text-sm hover:bg-accent transition-colors',\n                      'flex items-center gap-2',\n                      { 'text-primary': isSelected }\n                    )}\n                    onClick={() => {\n                      const newValues = isSelected\n                        ? currentValues.filter((v: any) => v !== option.value)\n                        : [...currentValues, option.value]\n                      handleFilterChange(filter.key, newValues)\n                    }}\n                  >\n                    <div className={cn(\n                      'w-4 h-4 border border-border rounded flex items-center justify-center',\n                      { 'bg-primary border-primary': isSelected }\n                    )}>\n                      {isSelected && <Check size={10} className=\"text-primary-foreground\" />}\n                    </div>\n                    <span className=\"flex-1\">{option.label}</span>\n                    {option.count !== undefined && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        {option.count}\n                      </span>\n                    )}\n                  </button>\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n  \n  // Render boolean filter\n  const renderBooleanFilter = (filter: FilterOption) => {\n    const currentValue = activeFilters[filter.key]\n    const isChecked = currentValue === true\n    \n    return (\n      <label className=\"flex items-center gap-3 cursor-pointer hover:bg-accent/30 p-2 rounded transition-colors\">\n        <div className={cn(\n          'w-4 h-4 border border-border rounded flex items-center justify-center',\n          { 'bg-primary border-primary': isChecked }\n        )}>\n          {isChecked && <Check size={10} className=\"text-primary-foreground\" />}\n        </div>\n        <span className=\"text-sm flex-1\">{filter.label}</span>\n        <input\n          type=\"checkbox\"\n          checked={isChecked}\n          onChange={(e) => handleFilterChange(filter.key, e.target.checked || null)}\n          className=\"sr-only\"\n        />\n      </label>\n    )\n  }\n  \n  // Render date filter\n  const renderDateFilter = (filter: FilterOption) => {\n    const currentValue = activeFilters[filter.key]\n    \n    return (\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-foreground\">{filter.label}</label>\n        <div className=\"relative\">\n          <input\n            type=\"date\"\n            value={currentValue || ''}\n            onChange={(e) => handleFilterChange(filter.key, e.target.value || null)}\n            className={cn(\n              'w-full px-3 py-2 pl-9 text-sm border border-border rounded-md bg-background',\n              'focus:ring-1 focus:ring-primary/30 focus:border-primary/50'\n            )}\n          />\n          <Calendar size={14} className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\" />\n        </div>\n        {currentValue && (\n          <button\n            className=\"text-xs text-muted-foreground hover:text-foreground transition-colors\"\n            onClick={() => clearFilter(filter.key)}\n          >\n            Clear date\n          </button>\n        )}\n      </div>\n    )\n  }\n  \n  // Render date range filter\n  const renderDateRangeFilter = (filter: FilterOption) => {\n    const currentValue = activeFilters[filter.key] || {}\n    \n    return (\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-foreground\">{filter.label}</label>\n        <div className=\"grid grid-cols-2 gap-2\">\n          <div className=\"relative\">\n            <input\n              type=\"date\"\n              placeholder=\"From\"\n              value={currentValue.from || ''}\n              onChange={(e) => handleFilterChange(filter.key, {\n                ...currentValue,\n                from: e.target.value || null\n              })}\n              className={cn(\n                'w-full px-2 py-1 text-xs border border-border rounded bg-background',\n                'focus:ring-1 focus:ring-primary/30'\n              )}\n            />\n          </div>\n          <div className=\"relative\">\n            <input\n              type=\"date\"\n              placeholder=\"To\"\n              value={currentValue.to || ''}\n              onChange={(e) => handleFilterChange(filter.key, {\n                ...currentValue,\n                to: e.target.value || null\n              })}\n              className={cn(\n                'w-full px-2 py-1 text-xs border border-border rounded bg-background',\n                'focus:ring-1 focus:ring-primary/30'\n              )}\n            />\n          </div>\n        </div>\n        {(currentValue.from || currentValue.to) && (\n          <button\n            className=\"text-xs text-muted-foreground hover:text-foreground transition-colors\"\n            onClick={() => clearFilter(filter.key)}\n          >\n            Clear date range\n          </button>\n        )}\n      </div>\n    )\n  }\n  \n  // Render number filter\n  const renderNumberFilter = (filter: FilterOption) => {\n    const currentValue = activeFilters[filter.key]\n    \n    return (\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-foreground\">{filter.label}</label>\n        <input\n          type=\"number\"\n          value={currentValue || ''}\n          onChange={(e) => handleFilterChange(filter.key, e.target.value ? Number(e.target.value) : null)}\n          className={cn(\n            'w-full px-3 py-2 text-sm border border-border rounded-md bg-background',\n            'focus:ring-1 focus:ring-primary/30 focus:border-primary/50'\n          )}\n        />\n        {currentValue && (\n          <button\n            className=\"text-xs text-muted-foreground hover:text-foreground transition-colors\"\n            onClick={() => clearFilter(filter.key)}\n          >\n            Clear value\n          </button>\n        )}\n      </div>\n    )\n  }\n  \n  // Render filter based on type\n  const renderFilter = (filter: FilterOption) => {\n    switch (filter.type) {\n      case 'select':\n        return renderSelectFilter(filter)\n      case 'multiselect':\n        return renderMultiSelectFilter(filter)\n      case 'boolean':\n        return renderBooleanFilter(filter)\n      case 'date':\n        return renderDateFilter(filter)\n      case 'daterange':\n        return renderDateRangeFilter(filter)\n      case 'number':\n        return renderNumberFilter(filter)\n      default:\n        return null\n    }\n  }\n  \n  const visibleFilters = filters\n    .filter(f => f.isVisible)\n    .sort((a, b) => a.order - b.order)\n  \n  const activeFilterCount = Object.keys(activeFilters).filter(k => activeFilters[k] !== null && activeFilters[k] !== undefined && activeFilters[k] !== '').length\n  \n  if (visibleFilters.length === 0) {\n    return null\n  }\n  \n  return (\n    <div className={cn('space-y-4 p-3 bg-muted/30 border border-border rounded-md', className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <span className=\"text-sm font-medium text-foreground\">Filters</span>\n        {activeFilterCount > 0 && (\n          <button\n            className=\"flex items-center gap-1 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n            onClick={clearAllFilters}\n          >\n            <X size={12} />\n            Clear all ({activeFilterCount})\n          </button>\n        )}\n      </div>\n      \n      {/* Active Filter Tags */}\n      {activeFilterCount > 0 && (\n        <div className=\"flex flex-wrap gap-1\">\n          {Object.entries(activeFilters)\n            .filter(([, value]) => value !== null && value !== undefined && value !== '')\n            .map(([key, value]) => {\n              const filter = filters.find(f => f.key === key)\n              if (!filter) return null\n              \n              let displayValue = String(value)\n              if (Array.isArray(value)) {\n                displayValue = `${value.length} selected`\n              } else if (filter.options) {\n                const option = filter.options.find(o => o.value === value)\n                displayValue = option?.label || String(value)\n              }\n              \n              return (\n                <span\n                  key={key}\n                  className=\"inline-flex items-center gap-1 px-2 py-1 text-xs bg-primary/10 text-primary rounded\"\n                >\n                  <span>{filter.label}: {displayValue}</span>\n                  <button\n                    onClick={() => clearFilter(key)}\n                    className=\"hover:bg-primary/20 rounded\"\n                    aria-label={`Clear ${filter.label} filter`}\n                  >\n                    <X size={10} />\n                  </button>\n                </span>\n              )\n            })\n          }\n        </div>\n      )}\n      \n      {/* Filter Controls */}\n      <div className=\"space-y-3\">\n        {visibleFilters.map(filter => (\n          <div key={filter.key} className=\"space-y-1\">\n            {filter.type !== 'boolean' && (\n              <label className=\"text-sm font-medium text-foreground\">\n                {filter.label}\n                {filter.isRequired && <span className=\"text-destructive ml-1\">*</span>}\n              </label>\n            )}\n            {renderFilter(filter)}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default FilterPanel