/**\n * Search Bar Component (Task 8.5)\n * \n * Debounced search input with fuzzy search capabilities\n * and advanced search features for sidebar sections.\n */\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react'\nimport { Search, X, Filter } from 'lucide-react'\nimport { cn, debounce } from '../../lib/utils'\nimport { SearchConfig } from '../../../schemas/api/sidebar'\n\ninterface SearchBarProps {\n  config: SearchConfig\n  value?: string\n  onChange?: (term: string) => void\n  onAdvancedSearch?: (options: any) => void\n  placeholder?: string\n  className?: string\n  autoFocus?: boolean\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = ({\n  config,\n  value = '',\n  onChange,\n  onAdvancedSearch,\n  placeholder = config.placeholder,\n  className,\n  autoFocus = false\n}) => {\n  const [searchTerm, setSearchTerm] = useState(value)\n  const [isFocused, setIsFocused] = useState(false)\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [searchHistory, setSearchHistory] = useState<string[]>([])\n  \n  const inputRef = useRef<HTMLInputElement>(null)\n  \n  // Load search history from localStorage\n  useEffect(() => {\n    try {\n      const history = localStorage.getItem('sidebar-search-history')\n      if (history) {\n        setSearchHistory(JSON.parse(history).slice(0, 10)) // Keep last 10 searches\n      }\n    } catch (error) {\n      console.warn('Failed to load search history:', error)\n    }\n  }, [])\n  \n  // Save search history to localStorage\n  const saveSearchHistory = useCallback((term: string) => {\n    if (term.trim() && term.length >= config.minLength) {\n      const newHistory = [term, ...searchHistory.filter(h => h !== term)].slice(0, 10)\n      setSearchHistory(newHistory)\n      \n      try {\n        localStorage.setItem('sidebar-search-history', JSON.stringify(newHistory))\n      } catch (error) {\n        console.warn('Failed to save search history:', error)\n      }\n    }\n  }, [searchHistory, config.minLength])\n  \n  // Debounced search handler\n  const debouncedOnChange = useCallback(\n    debounce((term: string) => {\n      onChange?.(term)\n      if (term.trim()) {\n        saveSearchHistory(term)\n      }\n    }, config.debounceMs),\n    [onChange, config.debounceMs, saveSearchHistory]\n  )\n  \n  // Handle input change\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTerm = e.target.value\n    setSearchTerm(newTerm)\n    \n    if (newTerm.length >= config.minLength || newTerm.length === 0) {\n      debouncedOnChange(newTerm)\n    }\n  }, [debouncedOnChange, config.minLength])\n  \n  // Handle clear\n  const handleClear = useCallback(() => {\n    setSearchTerm('')\n    onChange?.('')\n    inputRef.current?.focus()\n  }, [onChange])\n  \n  // Handle keyboard navigation\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      if (searchTerm) {\n        handleClear()\n      } else {\n        inputRef.current?.blur()\n      }\n    } else if (e.key === 'Enter') {\n      e.preventDefault()\n      if (searchTerm.trim()) {\n        saveSearchHistory(searchTerm.trim())\n        inputRef.current?.blur()\n      }\n    }\n  }, [searchTerm, handleClear, saveSearchHistory])\n  \n  // Handle history item click\n  const handleHistoryClick = useCallback((term: string) => {\n    setSearchTerm(term)\n    onChange?.(term)\n    setIsFocused(false)\n  }, [onChange])\n  \n  // Auto focus\n  useEffect(() => {\n    if (autoFocus && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [autoFocus])\n  \n  // Sync external value changes\n  useEffect(() => {\n    if (value !== searchTerm) {\n      setSearchTerm(value)\n    }\n  }, [value]) // Don't include searchTerm to avoid infinite loop\n  \n  return (\n    <div className={cn('relative', className)}>\n      {/* Main Search Input */}\n      <div className={cn(\n        'relative flex items-center',\n        'border border-border rounded-md bg-background',\n        'transition-all duration-200',\n        {\n          'ring-2 ring-primary/30 border-primary/50': isFocused,\n          'hover:border-border/80': !isFocused\n        }\n      )}>\n        {/* Search Icon */}\n        <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n          <Search size={14} />\n        </div>\n        \n        {/* Input */}\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={searchTerm}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setTimeout(() => setIsFocused(false), 150)} // Delay to allow history clicks\n          placeholder={placeholder}\n          className={cn(\n            'w-full pl-9 pr-9 py-2 text-sm bg-transparent',\n            'focus:outline-none placeholder:text-muted-foreground'\n          )}\n          data-testid=\"search-input\"\n        />\n        \n        {/* Clear Button */}\n        {searchTerm && (\n          <button\n            className={cn(\n              'absolute right-8 top-1/2 -translate-y-1/2',\n              'text-muted-foreground hover:text-foreground transition-colors'\n            )}\n            onClick={handleClear}\n            aria-label=\"Clear search\"\n            data-testid=\"search-clear\"\n          >\n            <X size={14} />\n          </button>\n        )}\n        \n        {/* Advanced Search Toggle */}\n        {onAdvancedSearch && (\n          <button\n            className={cn(\n              'absolute right-3 top-1/2 -translate-y-1/2',\n              'text-muted-foreground hover:text-foreground transition-colors',\n              { 'text-primary': showAdvanced }\n            )}\n            onClick={() => setShowAdvanced(!showAdvanced)}\n            aria-label=\"Advanced search options\"\n            data-testid=\"search-advanced-toggle\"\n          >\n            <Filter size={14} />\n          </button>\n        )}\n      </div>\n      \n      {/* Search History Dropdown */}\n      {isFocused && searchHistory.length > 0 && !searchTerm && (\n        <div className={cn(\n          'absolute top-full left-0 right-0 mt-1 z-50',\n          'bg-popover border border-border rounded-md shadow-lg',\n          'py-1 max-h-48 overflow-y-auto'\n        )}>\n          <div className=\"px-3 py-1 text-xs text-muted-foreground font-medium border-b border-border\">\n            Recent Searches\n          </div>\n          {searchHistory.map((term, index) => (\n            <button\n              key={index}\n              className={cn(\n                'w-full px-3 py-2 text-left text-sm',\n                'hover:bg-accent transition-colors',\n                'flex items-center gap-2'\n              )}\n              onClick={() => handleHistoryClick(term)}\n            >\n              <Search size={12} className=\"text-muted-foreground\" />\n              <span className=\"flex-1 truncate\">{term}</span>\n            </button>\n          ))}\n          <div className=\"border-t border-border mt-1 pt-1\">\n            <button\n              className=\"w-full px-3 py-1 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n              onClick={() => {\n                setSearchHistory([])\n                localStorage.removeItem('sidebar-search-history')\n              }}\n            >\n              Clear History\n            </button>\n          </div>\n        </div>\n      )}\n      \n      {/* Advanced Search Panel */}\n      {showAdvanced && onAdvancedSearch && (\n        <div className={cn(\n          'absolute top-full left-0 right-0 mt-1 z-40',\n          'bg-popover border border-border rounded-md shadow-lg p-4'\n        )}>\n          <div className=\"space-y-3\">\n            <div className=\"text-sm font-medium\">Advanced Search Options</div>\n            \n            {/* Search Fields */}\n            <div>\n              <label className=\"text-xs text-muted-foreground\">Search In:</label>\n              <div className=\"mt-1 space-y-1\">\n                {config.searchFields.map(field => (\n                  <label key={field} className=\"flex items-center gap-2 text-xs\">\n                    <input type=\"checkbox\" defaultChecked className=\"text-primary\" />\n                    <span className=\"capitalize\">{field.replace('_', ' ')}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n            \n            {/* Search Options */}\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center gap-2 text-xs\">\n                <input type=\"checkbox\" defaultChecked={!config.caseSensitive} />\n                <span>Case insensitive</span>\n              </label>\n              <label className=\"flex items-center gap-2 text-xs\">\n                <input type=\"checkbox\" defaultChecked={config.fuzzySearch} />\n                <span>Fuzzy matching</span>\n              </label>\n              <label className=\"flex items-center gap-2 text-xs\">\n                <input type=\"checkbox\" defaultChecked={config.highlightMatches} />\n                <span>Highlight matches</span>\n              </label>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex gap-2 pt-2 border-t border-border\">\n              <button className=\"flex-1 px-3 py-1 text-xs bg-primary text-primary-foreground rounded hover:bg-primary/90\">\n                Apply\n              </button>\n              <button \n                className=\"px-3 py-1 text-xs text-muted-foreground hover:text-foreground\"\n                onClick={() => setShowAdvanced(false)}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Search Status */}\n      {searchTerm && searchTerm.length < config.minLength && (\n        <div className=\"absolute top-full left-0 right-0 mt-1 px-3 py-2 text-xs text-muted-foreground bg-muted rounded-md\">\n          Type at least {config.minLength} characters to search\n        </div>\n      )}\n      \n      {/* Search Info */}\n      {config.maxResults && (\n        <div className=\"mt-1 text-xs text-muted-foreground\">\n          Showing up to {config.maxResults} results\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default SearchBar